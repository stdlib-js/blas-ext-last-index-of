{
  "version": 3,
  "sources": ["../lib/non_core_shape.js", "../lib/base.js", "../lib/main.js", "../lib/assign.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar indicesComplement = require( '@stdlib/array-base-indices-complement' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\n\n\n// MAIN //\n\n/**\n* Returns the shape defined by the dimensions which are **not** included in a list of dimensions.\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - input ndarray\n* @param {IntegerArray} dims - list of dimensions\n* @returns {NonNegativeIntegerArray} shape\n*/\nfunction nonCoreShape( shape, dims ) { // TODO: consider moving to a `@stdlib/ndarray/base` utility\n\tvar ind = normalizeIndices( dims, shape.length-1 );\n\tif ( ind === null ) {\n\t\t// Note: this is an error condition, as `null` is returned when provided out-of-bounds indices...\n\t\treturn [];\n\t}\n\treturn takeIndexed( shape, indicesComplement( shape.length, ind ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nonCoreShape;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dtypes = require( '@stdlib/ndarray-dtypes' );\nvar glastIndexOf = require( '@stdlib/blas-ext-base-ndarray-glast-index-of' );\nvar dlastIndexOf = require( '@stdlib/blas-ext-base-ndarray-dlast-index-of' );\nvar slastIndexOf = require( '@stdlib/blas-ext-base-ndarray-slast-index-of' );\nvar factory = require( '@stdlib/ndarray-base-unary-reduce-strided1d-dispatch-factory' );\n\n\n// VARIABLES //\n\nvar idtypes0 = dtypes( 'all' ); // input ndarray\nvar idtypes1 = dtypes( 'all' ); // search element ndarray\nvar idtypes2 = dtypes( 'integer_index_and_generic' ); // from index ndarray\nvar odtypes = dtypes( 'integer_index_and_generic' );\nvar policies = {\n\t'output': 'integer_index_and_generic',\n\t'casting': 'none'\n};\nvar table = {\n\t'types': [\n\t\t'float64',\n\t\t'float32'\n\n\t\t// FIXME: add specialized support for `clastIndexOf` and `zlastIndexOf` once the corresponding packages are implemented\n\t],\n\t'fcns': [\n\t\tdlastIndexOf,\n\t\tslastIndexOf\n\t],\n\t'default': glastIndexOf\n};\n\n\n// MAIN //\n\n/**\n* Returns the last index of a specified search element along an ndarray dimension.\n*\n* @private\n* @name lastIndexOf\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {ndarrayLike} searchElement - search element\n* @param {ndarrayLike} fromIndex - indices from which to begin searching\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform operation\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} second argument must be either an ndarray-like object\n* @throws {TypeError} third argument must be either an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var scalar2ndarray = require( '@stdlib/ndarray-from-scalar' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, -3.0, 2.0, -5.0, 6.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 6 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Create a search element ndarray:\n* var searchElement = scalar2ndarray( 2.0, {\n*     'dtype': 'float64'\n* })\n*\n* // Create a from index ndarray:\n* var fromIndex = scalar2ndarray( -1, {\n*     'dtype': 'int32'\n* })\n*\n* // Perform operation:\n* var out = lastIndexOf( x, searchElement, fromIndex );\n* // returns <ndarray>\n*\n* var idx = out.get();\n* // returns 3\n*/\nvar lastIndexOf = factory( table, [ idtypes0, idtypes1, idtypes2 ], odtypes, policies ); // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = lastIndexOf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar broadcastScalar = require( '@stdlib/ndarray-base-broadcast-scalar' );\nvar maybeBroadcastArray = require( '@stdlib/ndarray-base-maybe-broadcast-array' );\nvar getDType = require( '@stdlib/ndarray-dtype' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar getOrder = require( '@stdlib/ndarray-order' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\nvar nonCoreShape = require( './non_core_shape.js' );\nvar base = require( './base.js' );\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.integer_index' );\n\n\n// MAIN //\n\n/**\n* Returns the last index of a specified search element along an ndarray dimension.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {(ndarrayLike|*)} searchElement - search element\n* @param {(ndarrayLike|integer)} [fromIndex=-1] - index from which to begin searching\n* @param {Options} [options] - function options\n* @param {integer} [options.dim=-1] - dimension over which to perform operation\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} second argument must be either an ndarray-like object or a scalar value\n* @throws {TypeError} third argument must be either an ndarray-like object or an integer\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension index must not exceed input ndarray bounds\n* @throws {RangeError} first argument must have at least one dimension\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, -3.0, 2.0, -5.0, 6.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 2, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 3, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform operation:\n* var out = lastIndexOf( x, 2.0 );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( out );\n* // returns [ 1, 0 ]\n*/\nfunction lastIndexOf( x, searchElement, fromIndex ) {\n\tvar hasOptions;\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar fidx;\n\tvar iflg;\n\tvar ord;\n\tvar dt;\n\tvar sh;\n\tvar v;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( nargs < 2 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an ndarray or a scalar value. Value: `%s`.', searchElement ) );\n\t}\n\t// Resolve input ndarray meta data:\n\tdt = getDType( x );\n\tord = getOrder( x );\n\n\t// Initialize an options object:\n\topts = {\n\t\t'dims': [ -1 ], // default behavior is to perform a reduction over the last dimension\n\t\t'keepdims': false\n\t};\n\n\t// Initialize the `fromIndex` to the last element along a dimension:\n\tfidx = -1;\n\n\t// Initialize a flag indicating whether the `fromIndex` argument is a scalar:\n\tiflg = true;\n\n\t// Initialize a flag indicating whether an `options` argument was provided:\n\thasOptions = false;\n\n\t// Case: lastIndexOf( x, search_element, ??? )\n\tif ( nargs === 3 ) {\n\t\t// Case: lastIndexOf( x, search_element, from_index_scalar )\n\t\tif ( isInteger( fromIndex ) ) {\n\t\t\tfidx = fromIndex;\n\t\t}\n\t\t// Case: lastIndexOf( x, search_element, from_index_ndarray )\n\t\telse if ( isndarrayLike( fromIndex ) ) {\n\t\t\tfidx = fromIndex;\n\t\t\tiflg = false;\n\t\t}\n\t\t// Case: lastIndexOf( x, search_element, options )\n\t\telse {\n\t\t\toptions = fromIndex;\n\t\t\thasOptions = true;\n\t\t}\n\t}\n\t// Case: lastIndexOf( x, search_element, from_index, options )\n\telse if ( nargs > 3 ) {\n\t\t// Case: lastIndexOf( x, search_element, from_index_scalar, options )\n\t\tif ( isInteger( fromIndex ) ) {\n\t\t\tfidx = fromIndex;\n\t\t}\n\t\t// Case: lastIndexOf( x, search_element, from_index_ndarray, options )\n\t\telse if ( isndarrayLike( fromIndex ) ) {\n\t\t\tfidx = fromIndex;\n\t\t\tiflg = false;\n\t\t}\n\t\t// Case: lastIndexOf( x, search_element, ???, options )\n\t\telse {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be either an ndarray or an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\toptions = arguments[ 3 ];\n\t\thasOptions = true;\n\t}\n\tif ( hasOptions ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\t// Resolve provided options...\n\t\tif ( hasOwnProp( options, 'dim' ) ) {\n\t\t\topts.dims[ 0 ] = options.dim;\n\t\t}\n\t\tif ( hasOwnProp( options, 'keepdims' ) ) {\n\t\t\topts.keepdims = options.keepdims;\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\topts.dtype = options.dtype;\n\t\t}\n\t}\n\t// Resolve the list of non-reduced dimensions:\n\tsh = getShape( x );\n\tif ( sh.length < 1 ) {\n\t\tthrow new RangeError( 'invalid argument. First argument must have at least one dimension.' );\n\t}\n\tsh = nonCoreShape( sh, opts.dims );\n\n\t// Broadcast the search element to match the shape of the non-reduced dimensions...\n\tif ( isndarrayLike( searchElement ) ) {\n\t\tv = maybeBroadcastArray( searchElement, sh );\n\t} else {\n\t\tv = broadcastScalar( searchElement, dt, sh, ord ); // WARNING: potential for undesired value casting (e.g., if `searchElement` is `null` and cast to `float64`, the broadcasted scalar will be `0`, not `null`!)\n\t}\n\t// Broadcast the `fromIndex` to match the shape of the non-reduced dimensions...\n\tif ( iflg ) {\n\t\tfidx = broadcastScalar( fidx, DEFAULT_DTYPE, sh, ord );\n\t} else {\n\t\tfidx = maybeBroadcastArray( fidx, sh );\n\t}\n\treturn base( x, v, fidx, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = lastIndexOf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar broadcastScalar = require( '@stdlib/ndarray-base-broadcast-scalar' );\nvar maybeBroadcastArray = require( '@stdlib/ndarray-base-maybe-broadcast-array' );\nvar getDType = require( '@stdlib/ndarray-dtype' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar getOrder = require( '@stdlib/ndarray-order' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\nvar nonCoreShape = require( './non_core_shape.js' );\nvar base = require( './base.js' ).assign;\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.integer_index' );\n\n\n// MAIN //\n\n/**\n* Returns the last index of a specified search element along an ndarray dimension and assigns the results to a provided output ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {(ndarrayLike|*)} searchElement - search element\n* @param {(ndarrayLike|integer)} [fromIndex=-1] - index from which to begin searching\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {integer} [options.dim=-1] - dimension over which to perform operation\n* @throws {TypeError} function must be provided at least three arguments\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} third argument must be either an ndarray-like object or an integer\n* @throws {TypeError} output argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension index must not exceed input ndarray bounds\n* @throws {RangeError} first argument must have at least one dimension\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var zeros = require( '@stdlib/ndarray-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, -3.0, 2.0, -5.0, 6.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 3 ];\n*\n* // Define the array strides:\n* var strides = [ 3, 1 ];\n*\n* // Define the index offset:\n* var offset = 0;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, shape, strides, offset, 'row-major' );\n*\n* // Create an output ndarray:\n* var y = zeros( [ 2 ], {\n*     'dtype': 'int32'\n* });\n*\n* // Perform operation:\n* var out = assign( x, 2.0, y );\n* // returns <ndarray>\n*\n* var bool = ( out === y );\n* // returns true\n*\n* var arr = ndarray2array( out );\n* // returns [ 1, 0 ]\n*/\nfunction assign( x, searchElement, fromIndex, out ) {\n\tvar hasOptions;\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar fidx;\n\tvar iflg;\n\tvar ord;\n\tvar dt;\n\tvar sh;\n\tvar v;\n\tvar o;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( nargs < 2 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an ndarray or a scalar value. Value: `%s`.', searchElement ) );\n\t}\n\tif ( nargs < 3 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an ndarray. Value: `%s`.', fromIndex ) );\n\t}\n\t// Resolve input ndarray meta data:\n\tdt = getDType( x );\n\tord = getOrder( x );\n\n\t// Initialize an options object:\n\topts = {\n\t\t'dims': [ -1 ] // default behavior is to perform a reduction over the last dimension\n\t};\n\n\t// Initialize the `fromIndex` to the last element along a dimension:\n\tfidx = -1;\n\n\t// Initialize a flag indicating whether the `fromIndex` argument is a scalar:\n\tiflg = true;\n\n\t// Initialize a flag indicating whether an `options` argument was provided:\n\thasOptions = false;\n\n\t// Case: assign( x, search_element, out )\n\tif ( nargs === 3 ) {\n\t\to = fromIndex;\n\t}\n\t// Case: assign( x, search_element, ???, ??? )\n\telse if ( nargs === 4 ) {\n\t\t// Case: assign( x, search_element, from_index, out )\n\t\tif ( isndarrayLike( out ) ) {\n\t\t\to = out;\n\n\t\t\t// Case: assign( x, search_element, from_index_scalar, out )\n\t\t\tif ( isInteger( fromIndex ) ) {\n\t\t\t\tfidx = fromIndex;\n\t\t\t}\n\t\t\t// Case: assign( x, search_element, from_index_ndarray, out )\n\t\t\telse if ( isndarrayLike( fromIndex ) ) {\n\t\t\t\tfidx = fromIndex;\n\t\t\t\tiflg = false;\n\t\t\t}\n\t\t\t// Case: assign( x, search_element, ???, out )\n\t\t\telse {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be either an ndarray or an integer. Value: `%s`.', fromIndex ) );\n\t\t\t}\n\t\t}\n\t\t// Case: assign( x, search_element, out, options )\n\t\telse {\n\t\t\to = fromIndex;\n\t\t\toptions = out;\n\t\t\thasOptions = true;\n\t\t}\n\t}\n\t// Case: assign( x, search_element, from_index, out, options )\n\telse { // nargs > 4\n\t\t// Case: assign( x, search_element, from_index_scalar, out, options )\n\t\tif ( isInteger( fromIndex ) ) {\n\t\t\tfidx = fromIndex;\n\t\t}\n\t\t// Case: assign( x, search_element, from_index_ndarray, out, options )\n\t\telse if ( isndarrayLike( fromIndex ) ) {\n\t\t\tfidx = fromIndex;\n\t\t\tiflg = false;\n\t\t}\n\t\t// Case: assign( x, search_element, ???, out, options )\n\t\telse {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be either an ndarray or an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\to = out;\n\t\toptions = arguments[ 4 ];\n\t\thasOptions = true;\n\t}\n\tif ( hasOptions ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\t// Resolve provided options...\n\t\tif ( hasOwnProp( options, 'dim' ) ) {\n\t\t\topts.dims[ 0 ] = options.dim;\n\t\t}\n\t}\n\t// Resolve the list of non-reduced dimensions:\n\tsh = getShape( x );\n\tif ( sh.length < 1 ) {\n\t\tthrow new RangeError( 'invalid argument. First argument must have at least one dimension.' );\n\t}\n\tsh = nonCoreShape( sh, opts.dims );\n\n\t// Broadcast the search element to match the shape of the non-reduced dimensions...\n\tif ( isndarrayLike( searchElement ) ) {\n\t\tv = maybeBroadcastArray( searchElement, sh );\n\t} else {\n\t\tv = broadcastScalar( searchElement, dt, sh, ord ); // WARNING: potential for undesired value casting (e.g., if `searchElement` is `null` and cast to `float64`, the broadcasted scalar will be `0`, not `null`!)\n\t}\n\t// Broadcast the `fromIndex` to match the shape of the non-reduced dimensions...\n\tif ( iflg ) {\n\t\tfidx = broadcastScalar( fidx, DEFAULT_DTYPE, sh, ord );\n\t} else {\n\t\tfidx = maybeBroadcastArray( fidx, sh );\n\t}\n\treturn base( x, v, fidx, o, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the last index of a specified search element along an ndarray dimension.\n*\n* @module @stdlib/blas-ext-last-index-of\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var lastIndexOf = require( '@stdlib/blas-ext-last-index-of' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, -3.0, 2.0, -5.0, 6.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 2, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 3, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform operation:\n* var out = lastIndexOf( x, 2.0 );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( out );\n* // returns [ 1, 0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"assign\": \"main.assign\" }\n"],
  "mappings": "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",
  "names": ["require_non_core_shape", "__commonJSMin", "exports", "module", "normalizeIndices", "indicesComplement", "takeIndexed", "nonCoreShape", "shape", "dims", "ind", "require_base", "__commonJSMin", "exports", "module", "dtypes", "glastIndexOf", "dlastIndexOf", "slastIndexOf", "factory", "idtypes0", "idtypes1", "idtypes2", "odtypes", "policies", "table", "lastIndexOf", "require_main", "__commonJSMin", "exports", "module", "hasOwnProp", "isPlainObject", "isInteger", "isndarrayLike", "broadcastScalar", "maybeBroadcastArray", "getDType", "getShape", "getOrder", "format", "defaults", "nonCoreShape", "base", "DEFAULT_DTYPE", "lastIndexOf", "x", "searchElement", "fromIndex", "hasOptions", "options", "nargs", "opts", "fidx", "iflg", "ord", "dt", "sh", "v", "require_assign", "__commonJSMin", "exports", "module", "hasOwnProp", "isPlainObject", "isInteger", "isndarrayLike", "broadcastScalar", "maybeBroadcastArray", "getDType", "getShape", "getOrder", "format", "defaults", "nonCoreShape", "base", "DEFAULT_DTYPE", "assign", "x", "searchElement", "fromIndex", "out", "hasOptions", "options", "nargs", "opts", "fidx", "iflg", "ord", "dt", "sh", "v", "o", "setReadOnly", "main", "assign"]
}
